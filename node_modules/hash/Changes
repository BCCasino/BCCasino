Release history for Hash

0.06      2010-09-10 12:59

       - corrected Components.JS "Core" settings-array to be in dependency order, so this next release *should* work when installed via npm
       - added JooseX.Namespace.Depended into Components.JS "Bundle" settings-array
       - updated the README to indicate that joosex-namespace-depended should be called with require() after loading joose and prior to loading hash

0.05      2010-09-10 01:04

       - left out the Core/bundle setting for the npm build which turns out to be problematic;
         re-added it to dist.ini and doing another immediate release following on the heels of 0.04

0.04      2010-09-10 00:21

       - full port of Paul Johnston's cryptographic hash library is complete: MD5, SHA-1, SHA-256, SHA-512, RIPEMD-160
       - all hash algorithms have been extensively tested against ASCII and UTF-8 strings, compared to hashes generated by Linux userland utils
       - the encoding methods common to the hash scripts have been abstracted to a common class, "Encode"
       - convenience methods are now available: Hash.md5(), Hash.sha1(), etc.
       - API change: the basic hex-output hash methods in each script have been re/named according to Paul Johnston's original spec,
         e.g. Hash.MD5.hex_md5() rather than Hash.MD5.hash()
       - a helper method for converting JSON objects to arrays in a lossless exactly repeatable fashion has been added: Hash.oTa();
         this makes it possible to hash over stringified oTa(object) output with identical results across application endpoints

0.03      2010-09-04 14:12

       - I had left off the "Joose" keyword in the Hash classes (not necessary, but desirable so the code is not amgiguous)
       - synopsis in Readme.md now indicates how to pull in the Joose3+Hash bundle
       - other small changes to the docs, but hopefully some points are clearer

0.02      2010-09-04 13:44

       - MD5 and SHA-256 implementations have been wholly replaced with implementations that correctly process UTF-8 and ASCII
       - large samples of ASCII and UTF-8 strings have been generated and hashed with the md5sum and sha256 utilities available
         in Linux userland, thus providing a tabled of "canonical" hashes against which to compare the output of the JavaScript
         implementations; all comparison tests pass with both node.js and several web browsers

0.01      2010-09-02 03:36

       - initial release of the MD5 and SHA256 Hash classes from the larger CloudPatch project using Dist:Zilla and the jsan plugin

