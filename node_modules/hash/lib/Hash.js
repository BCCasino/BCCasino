Joose.Class('Hash', {
    
  /*VERSION*/VERSION : 0.06,

  use : [ 'Encode', 'Hash.MD5', 'Hash.SHA1', 'Hash.SHA256', 'Hash.SHA512', 'Hash.RIPEMD160' ],
    
  my : {
       
    methods : {

      md5 : function (str) {
        return Hash.MD5.hex_md5(str)
      },

      sha1 : function (str) {
        return Hash.SHA1.hex_sha1(str)
      },

      sha256 : function (str) {
        return Hash.SHA256.hex_sha256(str)
      },

      sha512 : function (str) {
        return Hash.SHA512.hex_sha512(str)
      },

      rmd160 : function (str) {
        return Hash.RIPEMD160.hex_rmd160(str)
      },

      oTa : function (obj, loop) {
        if (this.typeOf(obj) != 'object') { throw 'not an object' }
        if (loop) {
          var noCirc = obj
        }
        else {
          // on the first pass, check for circular structures in the input object
          var noCirc = JSON.parse(JSON.stringify(obj))
        }
        var thisClass = this
        var toArray = function (element, index) {
          switch (element[1]) {
            case 'object':
              return [element[0], 1, thisClass.oTa(noCirc[element[0]], true)]
            case 'array':
              return [element[0], thisClass.array_check_for_objects(noCirc[element[0]])]
            default:
              return [element[0], noCirc[element[0]]]
          }
        }
        var kt = this.keysAndTypes(noCirc, true)
        var tA = []
        return tA = Joose.A.map(kt, toArray)
      },

      typeOf : function (value) {
        var s = typeof value
        if (s === 'object') {
          if (value) {
            if (typeof value.length === 'number' && !(value.propertyIsEnumerable('length')) && typeof value.splice === 'function') {
             s = 'array'
            }
          }
          else {
            s = 'null'
          }
        }
        return s
      },

      keys : function (obj) {
        if (this.typeOf(obj) != 'object') { throw 'not an object' }
        var keys = []
        for (var key in obj) {
          keys.push(key)
        }
        return keys
      },

      keysAndTypes : function (obj, sort) {
        if (sort) {
          var Keys = this.keys(obj).sort()
        }
        else {
          var Keys = this.keys(obj)
        }
        var thisClass = this
        var kAt = function (element, index) {
           return [element, thisClass.typeOf(obj[element])]
        }
        var kt = []
        return kt = Joose.A.map(Keys, kAt)
      },

      array_check_for_objects : function (a) {
        thisClass = this
        var expand = function (element, index) {
          switch (thisClass.typeOf(element)) {
            case 'object':
              return thisClaTarray(element, true)
            case 'array':
              return thisClass.array_check_for_objects(element)
            default:
              return element
          }
        }
        ea = []        
        return ea = Joose.A.map(a, expand)
      }

    }

  }

})

